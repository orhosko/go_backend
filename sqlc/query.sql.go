// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createFixture = `-- name: CreateFixture :exec
INSERT INTO match (
  home, guest, played, week
) VALUES (
  ?, ?, ?, ?
)
`

type CreateFixtureParams struct {
	Home   interface{}
	Guest  interface{}
	Played sql.NullBool
	Week   sql.NullInt64
}

func (q *Queries) CreateFixture(ctx context.Context, arg CreateFixtureParams) error {
	_, err := q.db.ExecContext(ctx, createFixture,
		arg.Home,
		arg.Guest,
		arg.Played,
		arg.Week,
	)
	return err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO team (
  name, strength
) VALUES (
  ?, ?
)
RETURNING id, name, strength
`

type CreateTeamParams struct {
	Name     string
	Strength sql.NullInt64
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.Strength)
	var i Team
	err := row.Scan(&i.ID, &i.Name, &i.Strength)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM team
WHERE id = ?
`

func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, name, strength FROM team
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeam, id)
	var i Team
	err := row.Scan(&i.ID, &i.Name, &i.Strength)
	return i, err
}

const getTeamByName = `-- name: GetTeamByName :one
SELECT id, name, strength FROM team
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetTeamByName(ctx context.Context, name string) (Team, error) {
	row := q.db.QueryRowContext(ctx, getTeamByName, name)
	var i Team
	err := row.Scan(&i.ID, &i.Name, &i.Strength)
	return i, err
}

const getTeamStanding = `-- name: GetTeamStanding :one
SELECT id, points, wins, draws, losses, goal_diff FROM standing
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetTeamStanding(ctx context.Context, id int64) (Standing, error) {
	row := q.db.QueryRowContext(ctx, getTeamStanding, id)
	var i Standing
	err := row.Scan(
		&i.ID,
		&i.Points,
		&i.Wins,
		&i.Draws,
		&i.Losses,
		&i.GoalDiff,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, name, strength FROM team
ORDER BY name
`

func (q *Queries) ListTeams(ctx context.Context) ([]Team, error) {
	rows, err := q.db.QueryContext(ctx, listTeams)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Team
	for rows.Next() {
		var i Team
		if err := rows.Scan(&i.ID, &i.Name, &i.Strength); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveResult = `-- name: SaveResult :exec
UPDATE match
SET played = ?
WHERE id = ?
`

type SaveResultParams struct {
	Played sql.NullBool
	ID     int64
}

func (q *Queries) SaveResult(ctx context.Context, arg SaveResultParams) error {
	_, err := q.db.ExecContext(ctx, saveResult, arg.Played, arg.ID)
	return err
}

const updateTeamStrenght = `-- name: UpdateTeamStrenght :exec
UPDATE team
SET strength = ?
WHERE id = ?
`

type UpdateTeamStrenghtParams struct {
	Strength sql.NullInt64
	ID       int64
}

func (q *Queries) UpdateTeamStrenght(ctx context.Context, arg UpdateTeamStrenghtParams) error {
	_, err := q.db.ExecContext(ctx, updateTeamStrenght, arg.Strength, arg.ID)
	return err
}

const standing = `-- name: standing :exec
UPDATE standing
SET points = ?,
wins = ?,
draws = ?,
losses = ?,
goal_diff = ?
WHERE id = ?
`

type standingParams struct {
	Points   sql.NullInt64
	Wins     sql.NullInt64
	Draws    sql.NullInt64
	Losses   sql.NullInt64
	GoalDiff sql.NullInt64
	ID       int64
}

func (q *Queries) standing(ctx context.Context, arg standingParams) error {
	_, err := q.db.ExecContext(ctx, standing,
		arg.Points,
		arg.Wins,
		arg.Draws,
		arg.Losses,
		arg.GoalDiff,
		arg.ID,
	)
	return err
}
