package templates

import (
	"fmt"
	"github.com/orhosko/go-backend/sqlc"
)

templ Hello(name string, teams []sqlc.Team) {
	<!DOCTYPE html>
	<html>
		<head>
			<title>Gin + Templ Example</title>
			<style>
				h1 body {
					font-family: sans-serif;
					display: flex;
					justify-content: center;
					align-items: center;
					min-height: 100vh;
					margin: 0;
					background-color: #f0f0f0;
				}
				h1 {
					color: #333;
					text-align: center;
				}
			</style>
		</head>
		<body>
			<h1>Hello, { name }!</h1>
			@Test(name)
			@TeamTable(teams)
		</body>
	</html>
}

templ Test(name string) {
	<div>
		<p>Test: { name }</p>
		<p>Test: { name }</p>
	</div>
}

templ TeamTable(teams []sqlc.Team) {
	<table>
		<thead>
			<tr>
				<th>Team ID</th>
				<th>Team Name</th>
			</tr>
		</thead>
		<tbody>
			for _, team := range teams {
					<tr>
						<td>{ team.ID }</td>
						<td>{ team.Name }</td>
					</tr>
				}
		</tbody>
	</table>
}

// StandingsPageData holds all the data needed for the standings page.
type StandingsPageData struct {
	CurrentWeek           int
	LeagueTable           []sqlc.Teamstanding
	MatchResults          []MatchDisplay
	ChampionshipPredictions []TeamPrediction
}

// MatchDisplay is a simplified struct for displaying match results.
type MatchDisplay struct {
	HomeTeamName  string
	GuestTeamName string
	HomeScore     int32
	GuestScore    int32
}

// TeamPrediction represents a team's championship prediction percentage.
type TeamPrediction struct {
	TeamName    string
	Probability float64 // e.g., 0.60 for 60%
}

// Standings is the main template for displaying the league standings.
templ Standings(data StandingsPageData) {
	@Layout(PageMeta{Title: fmt.Sprintf("League Standings - Week %d", data.CurrentWeek), Description: "Current football league standings and match results"}) {
		<h1>Football League Simulation</h1>

		<div style="display: flex; justify-content: space-between; align-items: flex-start; gap: 20px;">
			<div style="flex: 2;">
				<h2>League Table - Week { fmt.Sprintf("%d", data.CurrentWeek) }</h2>
				@LeagueTable(data.LeagueTable)
			</div>
			<div style="flex: 1;">
				<div class="match-results">
					<h3>{ fmt.Sprintf("%d", data.CurrentWeek) }th Week Match Result</h3>
					@MatchResults(data.MatchResults)
				</div>
				<div class="prediction-box">
					<h3>{ fmt.Sprintf("%d", data.CurrentWeek) } Week Predictions of Championship</h3>
					@ChampionshipPredictions(data.ChampionshipPredictions)
				</div>
			</div>
		</div>

		<div class="button-group">
			<form action="/play-all" method="post">
				<button type="submit" class="button">Play All</button>
			</form>
			<form action="/next-week" method="post">
				<button type="submit" class="button">Next Week</button>
			</form>
		</div>
	}
}

// LeagueTable displays the league table.
templ LeagueTable(standings []sqlc.Teamstanding) {
	<table>
		<thead>
			<tr>
				<th>#</th>
				<th>Team</th>
				<th>PTS</th>
				<th>P</th>
				<th>W</th>
				<th>D</th>
				<th>L</th>
				<th>GD</th>
			</tr>
		</thead>
		<tbody>
			for i, ts := range standings {
				<tr>
					<td>{ fmt.Sprintf("%d", i+1) }</td> // Rank
					<td>{ ts.Team.Name }</td>
					<td>{ fmt.Sprintf("%d", ts.Standing.Points) }</td>
					<td>{ fmt.Sprintf("%d", ts.Standing.Wins) }</td>
					<td>{ fmt.Sprintf("%d", ts.Standing.Draws) }</td>
					<td>{ fmt.Sprintf("%d", ts.Standing.Losses) }</td>
					<td>{ fmt.Sprintf("%d", ts.Standing.GoalDiff) }</td>
				</tr>
			}
		</tbody>
	</table>
}

// MatchResults displays the results of the current week's matches.
templ MatchResults(matches []MatchDisplay) {
	<ul>
		if len(matches) == 0 {
			<li>No matches played this week.</li>
		} else {
			for _, match := range matches {
				<li>{ match.HomeTeamName } { fmt.Sprintf("%d", match.HomeScore) } - { fmt.Sprintf("%d", match.GuestScore) } { match.GuestTeamName }</li>
			}
		}
	</ul>
}

// ChampionshipPredictions displays the predictions for championship.
templ ChampionshipPredictions(predictions []TeamPrediction) {
	<ul class="prediction-list">
		if len(predictions) == 0 {
			<li>No predictions available.</li>
		} else {
			for _, pred := range predictions {
				<li>
					<span>{ pred.TeamName }</span>
					<span>{ fmt.Sprintf("%.2f%%", pred.Probability*100) }</span>
				</li>
			}
		}
	</ul>
}

// PageMeta defines common metadata for a page.
type PageMeta struct {
	Title       string
	Description string
}

// Layout is the base template for all pages.
templ Layout(meta PageMeta) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>{ meta.Title }</title>
		<meta name="description" content={ meta.Description }/>
		// You can link your CSS here
		<style>
			body {
				font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
				margin: 0;
				padding: 20px;
				background-color: #f4f7f6;
				color: #333;
			}
			.container {
				max-width: 960px;
				margin: 20px auto;
				background-color: #ffffff;
				padding: 30px;
				border-radius: 8px;
				box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
			}
			h1, h2 {
				color: #2c3e50;
				text-align: center;
				margin-bottom: 25px;
			}
			table {
				width: 100%;
				border-collapse: collapse;
				margin-top: 20px;
				box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
			}
			th, td {
				padding: 12px 15px;
				text-align: left;
				border-bottom: 1px solid #ddd;
			}
			th {
				background-color: #4CAF50;
				color: white;
				text-transform: uppercase;
				font-size: 0.9em;
				letter-spacing: 0.05em;
			}
			tr:nth-child(even) {
				background-color: #f9f9f9;
			}
			tr:hover {
				background-color: #f1f1f1;
			}
			.button-group {
				display: flex;
				justify-content: center;
				gap: 15px;
				margin-top: 30px;
			}
			.button {
				background-color: #007bff;
				color: white;
				padding: 10px 20px;
				border: none;
				border-radius: 5px;
				cursor: pointer;
				font-size: 1em;
				text-decoration: none;
				transition: background-color 0.3s ease;
			}
			.button:hover {
				background-color: #0056b3;
			}
			.prediction-box {
				background-color: #e9ecef;
				padding: 20px;
				border-radius: 8px;
				margin-top: 30px;
				box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
			}
			.prediction-box h3 {
				text-align: center;
				color: #34495e;
				margin-bottom: 15px;
			}
			.prediction-list {
				list-style: none;
				padding: 0;
				margin: 0;
			}
			.prediction-list li {
				display: flex;
				justify-content: space-between;
				padding: 8px 0;
				border-bottom: 1px dashed #ced4da;
			}
			.prediction-list li:last-child {
				border-bottom: none;
			}
			.match-results {
				margin-top: 30px;
				background-color: #d1ecf1;
				padding: 20px;
				border-radius: 8px;
				box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
			}
			.match-results h3 {
				text-align: center;
				color: #0c5460;
				margin-bottom: 15px;
			}
			.match-results ul {
				list-style: none;
				padding: 0;
			}
			.match-results li {
				padding: 8px 0;
				font-weight: bold;
				color: #0f6674;
				text-align: center;
			}
		</style>
	</head>
	<body>
		<div class="container">
			{ children... }
		</div>
	</body>
	</html>
}
